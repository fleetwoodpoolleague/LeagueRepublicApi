name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: 1
      DOTNET_VERSION: "10.0.100-rc.2.25502.107"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Try official setup-dotnet first
      - name: Setup .NET 10 (attempt)
        id: setup
        continue-on-error: true
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Fallback if setup-dotnet doesnâ€™t recognise .NET 10 yet
      - name: Manual install .NET 10 SDK
        if: steps.setup.outcome == 'failure'
        run: |
          echo "Setup-dotnet failed; installing manually..."
          SDK_URL="https://dotnetcli.azureedge.net/dotnet/Sdk/${DOTNET_VERSION}/dotnet-sdk-${DOTNET_VERSION}-linux-x64.tar.gz"
          wget -q $SDK_URL -O dotnet-sdk.tar.gz
          mkdir -p $HOME/dotnet
          tar -xzf dotnet-sdk.tar.gz -C $HOME/dotnet
          echo "$HOME/dotnet" >> $GITHUB_PATH
          echo "DOTNET_ROOT=$HOME/dotnet" >> $GITHUB_ENV
          dotnet --version

      # Restore dependencies
      - name: Restore
        run: dotnet restore

      # Build
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # Test (if applicable)
      - name: Test
        run: dotnet test --configuration Release --no-restore

      # Publish release binaries
      - name: Publish
        run: dotnet publish --configuration Release --output ./publish

      # Run the executable to generate the ICS files
      - name: Generate ICS files
        run: |
          chmod +x ./publish/LeagueRepublicConsole
          ./publish/LeagueRepublicConsole ics "${{ secrets.LEAGUE_ID }}"

      - name: Debug workspace
        run: |
           echo "Current directory: $(pwd)"
           echo "List all .ics files recursively:"
           find . -type f -name "*.ics" || echo "No .ics files found"
          # Push generated ICS files into another repository
          
      - name: Push ICS files to target repository
        env:
          TARGET_REPO_TOKEN: ${{ secrets.PUSH_TOKEN }}
        run: |
          TARGET_REPO="fleetwoodpoolleague/Fixtures"  # change this
          TARGET_DIR="ics"                              # subfolder in target repo
          BRANCH="main"                                 # or gh-pages etc.

          git config --global user.name "eightball[bot]"
          git config --global user.email "eightball[bot]@users.noreply.github.com"

          # Clone the target repo
          git clone --depth=1 https://x-access-token:${TARGET_REPO_TOKEN}@github.com/${TARGET_REPO}.git target-repo
          cd target-repo

          mkdir -p "${TARGET_DIR}"
          rm -f ${TARGET_DIR}/*.ics 2>/dev/null || true
          cp ./*.ics "${TARGET_DIR}/" || true

          git add "${TARGET_DIR}/"
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update generated ICS files from CI"
            git push origin ${BRANCH}
          fi

